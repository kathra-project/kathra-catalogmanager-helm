// Code generated by go-swagger; DO NOT EDIT.

package read_catalog_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	CatalogEntryPackage "github.com/kathra-project/kathra-core-model-go/models"
)

// GetCatalogEntryPackageOKCode is the HTTP code returned for type GetCatalogEntryPackageOK
const GetCatalogEntryPackageOKCode int = 200

/*GetCatalogEntryPackageOK CatalogEntryPackage with details

swagger:response getCatalogEntryPackageOK
*/
type GetCatalogEntryPackageOK struct {

	/*
	  In: Body
	*/
	Payload CatalogEntryPackage.CatalogEntryPackage `json:"body,omitempty"`
}

// NewGetCatalogEntryPackageOK creates GetCatalogEntryPackageOK with default headers values
func NewGetCatalogEntryPackageOK() *GetCatalogEntryPackageOK {

	return &GetCatalogEntryPackageOK{}
}

// WithPayload adds the payload to the get catalog entry package o k response
func (o *GetCatalogEntryPackageOK) WithPayload(payload CatalogEntryPackage.CatalogEntryPackage) *GetCatalogEntryPackageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get catalog entry package o k response
func (o *GetCatalogEntryPackageOK) SetPayload(payload CatalogEntryPackage.CatalogEntryPackage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCatalogEntryPackageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetCatalogEntryPackageNotFoundCode is the HTTP code returned for type GetCatalogEntryPackageNotFound
const GetCatalogEntryPackageNotFoundCode int = 404

/*GetCatalogEntryPackageNotFound CatalogEntryPackage not found

swagger:response getCatalogEntryPackageNotFound
*/
type GetCatalogEntryPackageNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetCatalogEntryPackageNotFound creates GetCatalogEntryPackageNotFound with default headers values
func NewGetCatalogEntryPackageNotFound() *GetCatalogEntryPackageNotFound {

	return &GetCatalogEntryPackageNotFound{}
}

// WithPayload adds the payload to the get catalog entry package not found response
func (o *GetCatalogEntryPackageNotFound) WithPayload(payload string) *GetCatalogEntryPackageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get catalog entry package not found response
func (o *GetCatalogEntryPackageNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCatalogEntryPackageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetCatalogEntryPackageInternalServerErrorCode is the HTTP code returned for type GetCatalogEntryPackageInternalServerError
const GetCatalogEntryPackageInternalServerErrorCode int = 500

/*GetCatalogEntryPackageInternalServerError Internal error

swagger:response getCatalogEntryPackageInternalServerError
*/
type GetCatalogEntryPackageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetCatalogEntryPackageInternalServerError creates GetCatalogEntryPackageInternalServerError with default headers values
func NewGetCatalogEntryPackageInternalServerError() *GetCatalogEntryPackageInternalServerError {

	return &GetCatalogEntryPackageInternalServerError{}
}

// WithPayload adds the payload to the get catalog entry package internal server error response
func (o *GetCatalogEntryPackageInternalServerError) WithPayload(payload string) *GetCatalogEntryPackageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get catalog entry package internal server error response
func (o *GetCatalogEntryPackageInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCatalogEntryPackageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
