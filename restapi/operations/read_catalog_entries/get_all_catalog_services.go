// Code generated by go-swagger; DO NOT EDIT.

package read_catalog_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllCatalogServicesHandlerFunc turns a function with the right signature into a get all catalog services handler
type GetAllCatalogServicesHandlerFunc func(GetAllCatalogServicesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllCatalogServicesHandlerFunc) Handle(params GetAllCatalogServicesParams) middleware.Responder {
	return fn(params)
}

// GetAllCatalogServicesHandler interface for that can handle valid get all catalog services params
type GetAllCatalogServicesHandler interface {
	Handle(GetAllCatalogServicesParams) middleware.Responder
}

// NewGetAllCatalogServices creates a new http.Handler for the get all catalog services operation
func NewGetAllCatalogServices(ctx *middleware.Context, handler GetAllCatalogServicesHandler) *GetAllCatalogServices {
	return &GetAllCatalogServices{Context: ctx, Handler: handler}
}

/*GetAllCatalogServices swagger:route GET /catalogEntries Read catalog entries getAllCatalogServices

Get all entries in the catalog

*/
type GetAllCatalogServices struct {
	Context *middleware.Context
	Handler GetAllCatalogServicesHandler
}

func (o *GetAllCatalogServices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllCatalogServicesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
