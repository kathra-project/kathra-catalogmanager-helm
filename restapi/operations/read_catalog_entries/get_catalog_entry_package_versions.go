// Code generated by go-swagger; DO NOT EDIT.

package read_catalog_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCatalogEntryPackageVersionsHandlerFunc turns a function with the right signature into a get catalog entry package versions handler
type GetCatalogEntryPackageVersionsHandlerFunc func(GetCatalogEntryPackageVersionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCatalogEntryPackageVersionsHandlerFunc) Handle(params GetCatalogEntryPackageVersionsParams) middleware.Responder {
	return fn(params)
}

// GetCatalogEntryPackageVersionsHandler interface for that can handle valid get catalog entry package versions params
type GetCatalogEntryPackageVersionsHandler interface {
	Handle(GetCatalogEntryPackageVersionsParams) middleware.Responder
}

// NewGetCatalogEntryPackageVersions creates a new http.Handler for the get catalog entry package versions operation
func NewGetCatalogEntryPackageVersions(ctx *middleware.Context, handler GetCatalogEntryPackageVersionsHandler) *GetCatalogEntryPackageVersions {
	return &GetCatalogEntryPackageVersions{Context: ctx, Handler: handler}
}

/*GetCatalogEntryPackageVersions swagger:route GET /catalogEntries/{providerId}/versions Read catalog entries getCatalogEntryPackageVersions

Get all version for an entry in the catalog

*/
type GetCatalogEntryPackageVersions struct {
	Context *middleware.Context
	Handler GetCatalogEntryPackageVersionsHandler
}

func (o *GetCatalogEntryPackageVersions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCatalogEntryPackageVersionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
