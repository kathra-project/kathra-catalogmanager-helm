/*
 * Kathra Catalog Manager
 *
 * KATHRA Catalog Management API permetting :   * Generate source's packages from templates   * Insert catalog entry from template      * Insert catalog entry from file     * Insert catalog entry from source repository    * Read catalog entries from catalog    * Read catalog details from catalog
 *
 * API version: 1.1.0-RC-SNAPSHOT
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package kathracatalogmanagerhelmservices

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}
func GetSwaggerFile(w http.ResponseWriter, r *http.Request) {
	// grab the generated receipt.pdf file and stream it to browser
	streamBytes, err := ioutil.ReadFile("./api/swagger.yaml")

	if err != nil {
		fmt.Println(err)
		w.WriteHeader(http.StatusInternalServerError)
		os.Exit(1)
	}

	b := bytes.NewBuffer(streamBytes)

	// stream straight to client(browser)
	w.Header().Set("Content-type", "text/yaml")
	w.WriteHeader(http.StatusOK)

	if _, err := b.WriteTo(w); err != nil { // <----- here!
		fmt.Fprintf(w, "%s", err)
	}
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/v1/",
		Index,
	},

	Route{
		"getSwaggerFile",
		strings.ToUpper("Get"),
		"/api/v1/swagger.yaml",
		GetSwaggerFile,
	},

	Route{
		"AddCatalogEntryFromArchive",
		strings.ToUpper("Post"),
		"/api/v1/catalogEntries/archive",
		AddCatalogEntryFromArchive,
	},

	Route{
		"AddCatalogEntryFromSourceRepositoryUrl",
		strings.ToUpper("Post"),
		"/api/v1/catalogEntries/sourceRepository",
		AddCatalogEntryFromSourceRepositoryUrl,
	},

	Route{
		"AddCatalogEntryFromTemplate",
		strings.ToUpper("Post"),
		"/api/v1/catalogEntries/template",
		AddCatalogEntryFromTemplate,
	},

	Route{
		"AddRuntimeEnvironment",
		strings.ToUpper("Post"),
		"/api/v1/runtimeEnvironments",
		AddRuntimeEnvironment,
	},

	Route{
		"GetRuntimeEnvironment",
		strings.ToUpper("Get"),
		"/api/v1/runtimeEnvironments",
		GetRuntimeEnvironment,
	},

	Route{
		"GetAllCatalogServices",
		strings.ToUpper("Get"),
		"/api/v1/catalogEntries",
		GetAllCatalogServices,
	},

	Route{
		"GetCatalogEntryVersions",
		strings.ToUpper("Get"),
		"/api/v1/catalogEntries/{providerId:[a-z%-0-9A-Z]+}/versions",
		GetCatalogEntryVersions,
	},

	Route{
		"GetCatalogEntry",
		strings.ToUpper("Get"),
		"/api/v1/catalogEntries/{providerId:[a-z%-0-9A-Z]+}",
		GetCatalogEntry,
	},

	Route{
		"GetCatalogEntryFromVersion",
		strings.ToUpper("Get"),
		"/api/v1/catalogEntries/{providerId:[a-z%-0-9A-Z]+}/versions/{version:.+}",
		GetCatalogEntryFromVersion,
	},

	Route{
		"GenerateFromTemplate",
		strings.ToUpper("Post"),
		"/api/v1/generateFromTemplate",
		GenerateFromTemplate,
	},

	Route{
		"GetTemplates",
		strings.ToUpper("Get"),
		"/api/v1/templates",
		GetTemplates,
	},
}
